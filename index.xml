<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ali&#39;s Posts</title>
    <link>https://alipullup.github.io/</link>
    <description>Recent content on Ali&#39;s Posts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution 4.0 International License.</copyright>
    <lastBuildDate>Mon, 19 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://alipullup.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What I Learned 2021-07-19</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2021-07-19/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2021-07-19/</guid>
      <description>Learned about Maven, Bouncy Castle Crypto APIs, CMS, RFC5652, and RFC3161 timestamps. Firmware signature for the win! smidump can pretty print MIBs Cisco audit logs includes hashes. At first I thought this would be a linear hash chain for non-repudiation, e.g. to ensure no one tampers with the logs. It turns out to be simpler: they periodically hash the output of show running-config, the file system etc. and put this in the audit logs.</description>
    </item>
    
    <item>
      <title>What I Learned 2021-07-12</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2021-07-12/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2021-07-12/</guid>
      <description>The Microsoft Bcrypt* functions are for ephemeral keys, while Ncrypt* are for persistent keys Sample C++ source code to sign using Windows Ncrypt* API Code from OpenVPN using Microsoft Ncrypt* API Stanford CS166 has great presentations on  Approximate Membership Queries: Bloom filter, XOR filter Hashing and Sketching   VRF, Virtual Routing and Forwarding Software bill of materials Appropriate Software Security Control Types for Third Party Service and Product Providers  Mentioned the &amp;ldquo;vBSIMM&amp;rdquo; framework, which seems to be a consulting framework for making money However, the graphic associated with it was useful: Requirements and design: Security architecture review, threat modeling, risk control Development: Code review, Open source security validation, binary static scan (?</description>
    </item>
    
    <item>
      <title>What I Learned 2021-07-05</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2021-07-05/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2021-07-05/</guid>
      <description> Some links for firmware signing  OpenPOWER sb-signing-utils OpenBSD Signify Open source Tripwire NetBSD&amp;rsquo;s mtree   Microsoft&amp;rsquo;s file checksum integrity verifier doesn&amp;rsquo;t have a Linux port Best practices for firmware code signing by Open Compute Intel has the eSPI protocol for tunneling I2C etc. How to fractionally encode bits  Basically given some numbers n_0 &amp;hellip; n_k all less than N, we can encode them as: n_0 + n_1 * N^1 + n_2 * N^2 + &amp;hellip; + n_k * N^k When decoding we can use division, and modulo to retrieve n_0 &amp;hellip; n_k   Finite state entropy Must disable VLAN support in Windows for my VirtualBox VM to send/receive VLAN tagged frames VirtualBox incantation needed to resolve corporate LAN addresses  </description>
    </item>
    
    <item>
      <title>What I Learned 2021-06-24</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2021-06-24/</link>
      <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2021-06-24/</guid>
      <description> ARM has LISA (&amp;ldquo;Linux Integrated System Analysis&amp;rdquo;) - Python tools for automated regression testing of the Linux kernel ACME is a set of hardware for temperature/power monitoring sigrok is an open-source signal analysis software suite with a large list of supported hardware - logic analyzers, oscilliscopes, thermometers, etc. Notepad++ makes an acceptable Markdown editor if paired with syntax highlighting, and addition to function list Everything by voidtools is a neat application for finding files on Windows OBS Studio can be used to create nifty presentations - though you need a green screen  </description>
    </item>
    
    <item>
      <title>What I Learned 2021-05-17</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2021-05-17/</link>
      <pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2021-05-17/</guid>
      <description>Another way of saying &amp;ldquo;real time system&amp;rdquo;, is to state that the &amp;ldquo;tempo&amp;rdquo; (time) is a critical factor. Summary of the paper Communication Breakdown: Analyzing CPU Usage in Commercial Web Workloads from 2004.  Static vs. dynamic web loads use CPU differently (duh!) Depending on workload, scheduling overhead (if many threads are spawned for short lived clients), networking overhead (TCP/IP and driver) dominate. For longer lived connections, the scheduling overhead is no longer the bottleneck, instead it&amp;rsquo;s the web server.</description>
    </item>
    
    <item>
      <title>What I Learned 2021-03-29</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2021-03-29/</link>
      <pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2021-03-29/</guid>
      <description> Google&amp;rsquo;s rule of 2: don&amp;rsquo;t write code that handles unsafe input in an unsafe language.   </description>
    </item>
    
    <item>
      <title>What I Learned 2021-03-22</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2021-03-22/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2021-03-22/</guid>
      <description> Hedley contains C macros for compiler-specific functionality zpl is a C library with threads, data structures, etc. People recommended rsync.net as a simple backup solution Some useful DevOps tools/libraries for network devices  Netmiko extends the Python Paramiko SSH library to improve connectivity to network devices NAPALM abstracts common operations (e.g. save and load config) across different network devices (e.g. Cisco, Juniper) YANG contains IEEE YANG language modules    </description>
    </item>
    
    <item>
      <title>What I Learned 2021-01-25</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2021-01-25/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2021-01-25/</guid>
      <description>Stanford has a website called Data Visualization and the Modern Imagination. The website has many interesting examples of charts, maps, and graphs. Likewise, National Atlas of Japan is beautiful. Some notes I took:  Pie-charts overlay on maps: area used to compare different regions, chart itself informs about the region. Same color is used across different charts (e.g. &amp;ldquo;red&amp;rdquo; always denotes foodstuffs) Out ring in pie-charts is used to indicate grouping Railway traffic volume is shown by thicker lines, passenger volume at station is shown by circular area (logarithmic)   &amp;ldquo;Edge&amp;rdquo; vs.</description>
    </item>
    
    <item>
      <title>What I Learned 2021-01-18</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2021-01-18/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2021-01-18/</guid>
      <description>bladeRF-wiphy is a complete 802.11 implementation, including the VHDL! This would&amp;rsquo;ve been a great read before I started my last job. Spent a bunch more time updating PTP 1588 transparent clock code to deal with VLANs  What happens to trunk port vs. access What happens with VLANs - port based VLAN vs. native What happens if the domain doesn&amp;rsquo;t match Which counters are helpful in debugging &amp;hellip; and so on &amp;hellip;    IEEE 1588/PTP delay request response Online discussions of PTP/1588 give the formula: delay = [(t2 - t1) + (t4 - t3)]/2.</description>
    </item>
    
    <item>
      <title>What I Learned 2021-01-11</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2021-01-11/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2021-01-11/</guid>
      <description>PTP has 1-Step and 2-Step implementations. In PTP 1-Step, the time stamp from the master clock is included in the first Sync message. PTP transparent clocks adjust the correctionField in Sync and Delay_Request messages PTP transparent clock can use the PTPv2 Reserved field (offset 16, size 4 bytes) to store a timestamp on ingress. PTP has a Peer to Peer (P2P) mode, as well as the normal End to End (E2E) mode The Peer to Peer mode uses PDelay_Request, and PDelay_Response messages in 1-Step mode, and additional PDelay_Response_Follow_Up message in 2-Step mode.</description>
    </item>
    
    <item>
      <title>What I Learned 2021-01-04</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2021-01-04/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2021-01-04/</guid>
      <description>There exists IEE 802.11bb which is a light based protocol (aka &amp;ldquo;Li-Fi&amp;rdquo;). BER-TLV and SIMPLE-TLV can be used to create a Type/Length/Value mapping. What&amp;rsquo;s interesting:  Type or Length can be variable length (SIMPLE-TLV fixes tag from 1..254 and length from 1..3 bytes) Variable length encoding as follows:  If value &amp;lt;= 0x7F: output value If value &amp;lt;= 0xFF: output 0x81, followed by value If value &amp;lt;= 0xFFFF: output 0x82, followed by big-endian value   Type has bit 5 (0x20) set if it&amp;rsquo;s a container.</description>
    </item>
    
    <item>
      <title>What I Learned 2020-12-28</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-12-28/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-12-28/</guid>
      <description>P99 is a set of macro and function definitions to ease programming &amp;ldquo;modern C&amp;rdquo; (C99). P99 API documentation. Well documented, but rather large. Doesn&amp;rsquo;t seem to be actively updated (perhaps there is no need?) If -ffreestanding is given to GCC, then __STDC_HOSTED__ will be set to 0 The book Computer Age Statistical Inference by Efron and Hastie seems well written. Browsed through the first few chapters and was impressed. Some exercises available here.</description>
    </item>
    
    <item>
      <title>What I Learned 2020-12-21</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-12-21/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-12-21/</guid>
      <description>If I ever work for a company that produces silicon that must run on Linux (again), I would highly recommend nightly performance tests that use the newest kernel. Since I started reading the kernel mailing lists, I see how many performance regressions are introduced, and only reported by users. For example, see this bug I&amp;rsquo;ve lost a lot of trust in the standard bodies. After the Dual EC DRBG backdoor, I ran into the controversy around the WPA3 Dragonfly Handshake.</description>
    </item>
    
    <item>
      <title>What I Learned 2020-12-14</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-12-14/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-12-14/</guid>
      <description> I didn&amp;rsquo;t know there was a Research Wahlberg meme, see this twitter account. Interesting article about Haskell naming conventions Interesting Linux kernel issue where L1 ASPM was calculated incorrectly thus leading to slow network performance.  </description>
    </item>
    
    <item>
      <title>What I Learned 2020-12-07</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-12-07/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-12-07/</guid>
      <description>ACM SIGPLAN Empirical Evaluation Guidelines  Make benchmarks reproducible Use full applications, not micro-benchmarks (&amp;ldquo;kernels&amp;rdquo;) Run many trials (5 isn&amp;rsquo;t enough) Report data distribution (histogram, along with summary statistics)   If I had to run a benchmark, what would I do?  Ensure system is quiet, see this link, and this link  Disable CPU frequency scaling / power management Disable hyper threading Disable ASLR   Test on different systems  Different CPU Different OS Different compilers   For micro-benchmarks use a standard library, like Google&amp;rsquo;s Benchmark I wish there was an updated version of stabilizer, or a similar tool that could run the same program loaded at different offsets, so I would figure out the sensitivity   Scapy to the rescue!</description>
    </item>
    
    <item>
      <title>What I Learned 2020-11-30</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-11-30/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-11-30/</guid>
      <description>AutoHotkey has a nifty script for typing Greek letters   I started the online course Improving your statistical inferences by Daniel Lakens. It&amp;rsquo;s been a great refresher. I am considering publishing my notes online.
The course starts by looking at p values. If nothing else, everyone should go through the first week of the course.
    H0 True H1 True     Significant finding False positive (α) True positive (1-α)   Non-significant finding True negative (1-β) False negative (β)    Here is a good visualization by Kristoffer Magnusson</description>
    </item>
    
    <item>
      <title>What I Learned 2020-11-23</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-11-23/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-11-23/</guid>
      <description>USB UserBenchmark website has benchmarks of USB flash drives. Linux supports &amp;ldquo;WWAN&amp;rdquo; (LTE) modems - I have no idea how these work! There is the USB cdc_mbim driver, but now there&amp;rsquo;s talk of adding a &amp;ldquo;WWAN&amp;rdquo; device. There are command line programs such as qmicli, mmcli, and mbicli. TuxMake provides &amp;ldquo;portable and repeatable Linux kernel builds&amp;rdquo;. There is also TuxBuild which provides Linux kernel builds as a service. Both tools are by Linaro.</description>
    </item>
    
    <item>
      <title>What I Learned 2020-11-16</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-11-16/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-11-16/</guid>
      <description>Linux device tree documentation can be written in YAML. Linux has hot and cold pages - for data a device will DMA to, you&amp;rsquo;d want to use a cold pages (using GPF_COLD allocation flag) - also see this link Freescale DPAA1 platforms will be getting support for XDP! 16-bit sign extension bug bites again: (ntohs(value) &amp;lt;&amp;lt; 16) will sign-extend when assigned to a 64-bit value A return trampoline (&amp;ldquo;retpoline&amp;rdquo;) may be enabled in GCC using -mindirect-branch=thunk-extern for the Linux kernel.</description>
    </item>
    
    <item>
      <title>What I Learned 2020-11-09</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-11-09/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-11-09/</guid>
      <description>Left shift of uint16_t promotes it to an int, and will sign-extend it if assigning a 64-bit value, e.g. code like: uint64_t x; uint16_t y=0x8000; x=y&amp;lt;&amp;lt;16; will assign x to ffffffff80000000 TCP syn-cookies have lots of problems! Just saw a fix and Google search found various issues that have been found over time. Not clear if the syn cookie enabling is per-port or global. Qualcomm has an IP Accelerator built into some SoC.</description>
    </item>
    
    <item>
      <title>What I Learned 2020-11-02</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-11-02/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-11-02/</guid>
      <description> Ghidra - tons of tutorials on YouTube In search of other build systems: DBMS Kbuild Linux jargon: &amp;ldquo;Reverse Christmas tree&amp;rdquo; - put longest declaration in function at top syzbot - finds so many bugs automatically! Notes on how to submit patch to Linux mailing list Linux has a self tests directory to exercise individual code paths in the kernel Example of Linux self tests: PowerPC self tests  </description>
    </item>
    
    <item>
      <title>What I Learned 2020-10-26</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-10-26/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-10-26/</guid>
      <description>Linux facility MODULE_SOFTDEP for adding dependency between modules, even if one doesn&amp;rsquo;t use the symbol from the other Linux macros for dealing with atomic sections of code, see this API page  non_block_start() / non_block_end() might_sleep() / cant_sleep() / might_sleep_if(cond) cant_migrate()   Linux has deprecated in_irq() / in_interrupt() - see this email Use a passed in parameter instead, e.g. may_sleep Use lockdep_assert_held(lock) for checking MACSec 802.1AE uses hostapd/wpa_supplicant to do L2 security!</description>
    </item>
    
    <item>
      <title>My experience with micro-services</title>
      <link>https://alipullup.github.io/posts/my-experience-with-microservices/</link>
      <pubDate>Fri, 16 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/my-experience-with-microservices/</guid>
      <description>Overview I wrote the following after my experience in architecting a system around microservices.
The implementation did not go as smoothly as expected, and I wanted to reflect on what went wrong.
To channel Jamie Z:
 Some people, when faced with a problem think “I know, I’ll use microservices.” Now they have 2^N problems.
 I think we used microservices for the wrong reasons:
 If you’re worried about future extensibility, then use a well defined interface to a library.</description>
    </item>
    
    <item>
      <title>U-Boot Notes</title>
      <link>https://alipullup.github.io/posts/u-boot-notes/</link>
      <pubDate>Thu, 13 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/u-boot-notes/</guid>
      <description>Introduction The following document contains some notes I took while debugging U-Boot board initialization for the MIPS and ARM platforms.
On one platform we had issues with the QSPI flash. On another platform we had memory issues. Yet another platform had issues with calling certain functions before some hardware was initialized.
 Startup The system jumps to the _start routine. This is mapped to a known address in Flash.
The board_init_f function calls various other functions:</description>
    </item>
    
    <item>
      <title>Disk Encryption Overview</title>
      <link>https://alipullup.github.io/posts/disk-encryption-overview/</link>
      <pubDate>Tue, 16 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/disk-encryption-overview/</guid>
      <description>Introduction This document describes disk encryption implemented using a combination of software and FPGA.
--Data--&amp;gt;FPGA--&amp;gt;Disks|MicrocontrollerThe data was encrypted using AES, in counter mode, with flexible key width.
For various reasons, we did not use an authenticated encryption mode.
A FPGA was responsible for encryption, to keep up with the high data rate. Control software running on a microcontroller was responsible for loading up the AES key schedule during bulk streaming operations.</description>
    </item>
    
    <item>
      <title>Gigabit Ethernet Protocol</title>
      <link>https://alipullup.github.io/posts/gigabit-ethernet-protocol/</link>
      <pubDate>Tue, 24 Jan 2006 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/gigabit-ethernet-protocol/</guid>
      <description>Introduction This document gives a brief overview of a UDP based data transfer protocol. The protocol was implemented on a Xilinx FPGA, and a portable C client running on a Windows or Linux machine.
 Bandwidth was managed by specifying an inter-packet gap (IPG) interval. The FPGA would send a data packet, wait the IPG amount, then send the next packet. Round-trip time (RTT) was determined using a timestamp embedded int he packets.</description>
    </item>
    
    <item>
      <title>Under the Hood of Ada</title>
      <link>https://alipullup.github.io/posts/under-the-hood-of-ada/</link>
      <pubDate>Fri, 01 Apr 2005 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/under-the-hood-of-ada/</guid>
      <description>Introduction The following is an old document I wrote when debugging the GCC Ada front-end for MIPS. Our platform was not officially supported and I was tasked with finding and fixing various issued related to exceptions, and tasking.
I&amp;rsquo;ve used that -gnatG switch to look at the processed source produced by GNAT and done some analysis. What follows is a summary and highlights from that analysis.
Exceptions The exception
Blocking_Error : exception; This is turned into</description>
    </item>
    
  </channel>
</rss>
