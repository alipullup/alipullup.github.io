<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>what-i-learned on Ali&#39;s Posts</title>
    <link>https://alipullup.github.io/tags/what-i-learned/</link>
    <description>Recent content in what-i-learned on Ali&#39;s Posts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution 4.0 International License.</copyright>
    <lastBuildDate>Mon, 28 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://alipullup.github.io/tags/what-i-learned/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What I Learned 2020-12-28</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-12-28/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-12-28/</guid>
      <description>P99 is a set of macro and function definitions to ease programming &amp;ldquo;modern C&amp;rdquo; (C99). P99 API documentation. Well documented, but rather large. Doesn&amp;rsquo;t seem to be actively updated (perhaps there is no need?) If -ffreestanding is given to GCC, then __STDC_HOSTED__ will be set to 0 The book Computer Age Statistical Inference by Efron and Hastie seems well written. Browsed through the first few chapters and was impressed. Some exercises available here.</description>
    </item>
    
    <item>
      <title>What I Learned 2020-12-21</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-12-21/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-12-21/</guid>
      <description>If I ever work for a company that produces silicon that must run on Linux (again), I would highly recommend nightly performance tests that use the newest kernel. Since I started reading the kernel mailing lists, I see how many performance regressions are introduced, and only reported by users. For example, see this bug I&amp;rsquo;ve lost a lot of trust in the standard bodies. After the Dual EC DRBG backdoor, I ran into the controversy around the WPA3 Dragonfly Handshake.</description>
    </item>
    
    <item>
      <title>What I Learned 2020-12-14</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-12-14/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-12-14/</guid>
      <description> I didn&amp;rsquo;t know there was a Research Wahlberg meme, see this twitter account. Interesting article about Haskell naming conventions Interesting Linux kernel issue where L1 ASPM was calculated incorrectly thus leading to slow network performance.  </description>
    </item>
    
    <item>
      <title>What I Learned 2020-12-07</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-12-07/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-12-07/</guid>
      <description>ACM SIGPLAN Empirical Evaluation Guidelines  Make benchmarks reproducible Use full applications, not micro-benchmarks (&amp;ldquo;kernels&amp;rdquo;) Run many trials (5 isn&amp;rsquo;t enough) Report data distribution (histogram, along with summary statistics)   If I had to run a benchmark, what would I do?  Ensure system is quiet, see this link, and this link  Disable CPU frequency scaling / power management Disable hyper threading Disable ASLR   Test on different systems  Different CPU Different OS Different compilers   For micro-benchmarks use a standard library, like Google&amp;rsquo;s Benchmark I wish there was an updated version of stabilizer, or a similar tool that could run the same program loaded at different offsets, so I would figure out the sensitivity   Scapy to the rescue!</description>
    </item>
    
    <item>
      <title>What I Learned 2020-11-30</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-11-30/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-11-30/</guid>
      <description>AutoHotkey has a nifty script for typing Greek letters   I started the online course Improving your statistical inferences by Daniel Lakens. It&amp;rsquo;s been a great refresher. I am considering publishing my notes online.
The course starts by looking at p values. If nothing else, everyone should go through the first week of the course.
    H0 True H1 True     Significant finding False positive (α) True positive (1-α)   Non-significant finding True negative (1-β) False negative (β)    Here is a good visualization by Kristoffer Magnusson</description>
    </item>
    
    <item>
      <title>What I Learned 2020-11-23</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-11-23/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-11-23/</guid>
      <description>USB UserBenchmark website has benchmarks of USB flash drives. Linux supports &amp;ldquo;WWAN&amp;rdquo; (LTE) modems - I have no idea how these work! There is the USB cdc_mbim driver, but now there&amp;rsquo;s talk of adding a &amp;ldquo;WWAN&amp;rdquo; device. There are command line programs such as qmicli, mmcli, and mbicli. TuxMake provides &amp;ldquo;portable and repeatable Linux kernel builds&amp;rdquo;. There is also TuxBuild which provides Linux kernel builds as a service. Both tools are by Linaro.</description>
    </item>
    
    <item>
      <title>What I Learned 2020-11-16</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-11-16/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-11-16/</guid>
      <description>Linux device tree documentation can be written in YAML. Linux has hot and cold pages - for data a device will DMA to, you&amp;rsquo;d want to use a cold pages (using GPF_COLD allocation flag) - also see this link Freescale DPAA1 platforms will be getting support for XDP! 16-bit sign extension bug bites again: (ntohs(value) &amp;lt;&amp;lt; 16) will sign-extend when assigned to a 64-bit value A return trampoline (&amp;ldquo;retpoline&amp;rdquo;) may be enabled in GCC using -mindirect-branch=thunk-extern for the Linux kernel.</description>
    </item>
    
    <item>
      <title>What I Learned 2020-11-09</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-11-09/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-11-09/</guid>
      <description>Left shift of uint16_t promotes it to an int, and will sign-extend it if assigning a 64-bit value, e.g. code like: uint64_t x; uint16_t y=0x8000; x=y&amp;lt;&amp;lt;16; will assign x to ffffffff80000000 TCP syn-cookies have lots of problems! Just saw a fix and Google search found various issues that have been found over time. Not clear if the syn cookie enabling is per-port or global. Qualcomm has an IP Accelerator built into some SoC.</description>
    </item>
    
    <item>
      <title>What I Learned 2020-11-02</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-11-02/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-11-02/</guid>
      <description> Ghidra - tons of tutorials on YouTube In search of other build systems: DBMS Kbuild Linux jargon: &amp;ldquo;Reverse Christmas tree&amp;rdquo; - put longest declaration in function at top syzbot - finds so many bugs automatically! Notes on how to submit patch to Linux mailing list Linux has a self tests directory to exercise individual code paths in the kernel Example of Linux self tests: PowerPC self tests  </description>
    </item>
    
    <item>
      <title>What I Learned 2020-10-26</title>
      <link>https://alipullup.github.io/posts/what-i-learned-2020-10-26/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alipullup.github.io/posts/what-i-learned-2020-10-26/</guid>
      <description>Linux facility MODULE_SOFTDEP for adding dependency between modules, even if one doesn&amp;rsquo;t use the symbol from the other Linux macros for dealing with atomic sections of code, see this API page  non_block_start() / non_block_end() might_sleep() / cant_sleep() / might_sleep_if(cond) cant_migrate()   Linux has deprecated in_irq() / in_interrupt() - see this email Use a passed in parameter instead, e.g. may_sleep Use lockdep_assert_held(lock) for checking MACSec 802.1AE uses hostapd/wpa_supplicant to do L2 security!</description>
    </item>
    
  </channel>
</rss>
